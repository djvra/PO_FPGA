module sequential_sender (
    input wire clk,             // Clock input
    input wire reset,           // Reset input
    input wire load,            // Load signal
    input wire [31:0] data_in_0, // Input 32-bit data 0
    input wire [31:0] data_in_1, // Input 32-bit data 1
    input wire [31:0] data_in_2, // Input 32-bit data 2
    output reg [31:0] number_out, // 32-bit output
    output reg valid            // Valid signal to indicate output
);

    reg [31:0] numbers [2:0];  // Array to store 3 32-bit numbers
    reg [4:0] state;           // State register
    reg [5:0] cycle_counter;   // Counter to handle 30-cycle delays

    // State encoding
    localparam IDLE = 5'd0,
               LOAD = 5'd1,
               SEND1 = 5'd2,
               WAIT1 = 5'd3,
               SEND2 = 5'd4,
               WAIT2 = 5'd5,
               SEND3 = 5'd6,
               WAIT3 = 5'd7;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            cycle_counter <= 6'd0;
            number_out <= 32'd0;
            valid <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    valid <= 1'b0;
                    if (load) begin
                        state <= LOAD;
                    end
                end

                LOAD: begin
                    // Load all numbers at the same time
                    numbers[0] <= data_in_0;
                    numbers[1] <= data_in_1;
                    numbers[2] <= data_in_2;
                    state <= SEND1;
                end

                SEND1: begin
                    number_out <= numbers[0];
                    valid <= 1'b1;
                    state <= WAIT1;
                    cycle_counter <= 6'd0;
                end

                WAIT1: begin
                    valid <= 1'b0;
                    if (cycle_counter < 6'd29) begin
                        cycle_counter <= cycle_counter + 1;
                    end else begin
                        state <= SEND2;
                    end
                end

                SEND2: begin
                    number_out <= numbers[1];
                    valid <= 1'b1;
                    state <= WAIT2;
                    cycle_counter <= 6'd0;
                end

                WAIT2: begin
                    valid <= 1'b0;
                    if (cycle_counter < 6'd29) begin
                        cycle_counter <= cycle_counter + 1;
                    end else begin
                        state <= SEND3;
                    end
                end

                SEND3: begin
                    number_out <= numbers[2];
                    valid <= 1'b1;
                    state <= WAIT3;
                    cycle_counter <= 6'd0;
                end

                WAIT3: begin
                    valid <= 1'b0;
                    if (cycle_counter < 6'd29) begin
                        cycle_counter <= cycle_counter + 1;
                    end else begin
                        state <= IDLE;
                    end
                end

                default: state <= IDLE;
            endcase
        end
    end

endmodule
